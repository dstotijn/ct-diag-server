version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.14
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: circleci/postgres:11.7
        environment: # environment variables for primary container
          POSTGRES_USER: circleci-demo-go
          POSTGRES_PASSWORD: circleci-demo-go
          POSTGRES_DB: circle_test

    parallelism: 2

    environment: # environment variables for the build itself
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir -p $TEST_RESULTS # create the test results directory

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}

      #  Wait for Postgres to be ready before proceeding
      - run:
          name: Waiting for Postgres to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client-11

      - run:
          name: Create database schema
          command: /usr/bin/psql -d "postgres://circleci-demo-go:circleci-demo-go@localhost:5432/circle_test?sslmode=disable" < postgres/schema.sql

      - run:
          name: Run unit tests
          environment: # environment variables for the database url and path to migration files
            POSTGRES_DSN: "postgres://circleci-demo-go:circleci-demo-go@localhost:5432/circle_test?sslmode=disable"

          # store the results of our tests in the $TEST_RESULTS directory
          command: |
            PACKAGE_NAMES=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES

      - run: GO111MODULE=off go get github.com/mattn/goveralls

      - run:
          name: Gather coverage
          environment:
            POSTGRES_DSN: "postgres://circleci-demo-go:circleci-demo-go@localhost:5432/circle_test?sslmode=disable"
          command: go test -v -cover -race -coverprofile=${TEST_RESULTS}/coverage.out ./...

      - run:
          name: Send coverage to Coveralls
          command: goveralls -coverprofile=${TEST_RESULTS}/coverage.out -service=circle-ci -repotoken=${COVERALLS_REPO_TOKEN}

      - run: make build-ci # pull and build dependencies for the project

      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

      - run:
          name: Start service
          environment:
            POSTGRES_DSN: "postgres://circleci-demo-go:circleci-demo-go@localhost:5432/circle_test?sslmode=disable"
          command: ./workdir/ct-diag-server -addr=:8080
          background: true # keep service running and proceed to next step

      - run:
          name: Validate service is working
          command: |
            sleep 5
            curl --retry 10 --retry-delay 1 http://localhost:8080/health

      - store_artifacts: # upload test summary for display in Artifacts
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results
workflows:
  version: 2
  build-workflow:
    jobs:
      - build
